<a href="https://github.com/andii-online/chip-8-emu">
<h1>An Oxidized Chip-8 Emulator</h1>
</a>

<p>
I have been an avid user of emulators for a long time, 
but I didn't have an understanding for how they worked internally.
So, I decided to start my journey into emulation by writing
a Chip-8 emulator (or interpreter if you want to be pedantic).
</p>

<h2>Background on Chip-8</h2>
<p>
As I alluded to earlier, the 
<a href="https://en.wikipedia.org/wiki/CHIP-8">Chip-8</a>
 is in-fact not an emulator, but instead an interpreted programming 
language. It was developed in the 70's by Joseph Weisecker. I will
be calling it an emulator from here on our just for the sake of 
simplicity, as that was the goal of this project from the jump.
</p>

<h2>Design of Emulator</h2>
<p>
I used Tobias Langhoff's 
<a href=""https://tobiasvl.github.io/blog/write-a-chip-8-emulator/>excellent breakdown</a> 
of the system when 
designing my program. 

My design philosophy is to follow a loose data-oriented paradigm to utilize 
Rust's amazing type system.

The Chip-8's internals are stored in a struct.

During a cpu cycle, the instruction is parsed and sent off to 
a function that represents the given opcode. This allows me to do 
some type checking to guarentee that the program doesn't crash 
from an incorrect integer cast.

Rendering is completely separate from the Chip-8 and is handled 
with the SDL2 rust bindings.
</p>
